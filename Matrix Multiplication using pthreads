#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define M 1000
#define N 1000
#define K 1000
#define NbThreads 4

int x[M][K];
int y[K][N];
int z[M][N];

void* matrix_multiply(void* arg) {
  int tid = ((int) arg);
  int start = tid * (M / NbThreads);
  int end = (tid + 1) * (M / NbThreads);
  for (int i = start; i < end; i++) {
    for (int j = 0; j < N; j++) {
      z[i][j] = 0;
      for (int k = 0; k < K; k++) {
        z[i][j] += x[i][k] * y[k][j];
      }
    }
  }
  pthread_exit(NULL);
}

int main() {
  pthread_t threads[NbThreads];
  int thread_ids[NbThreads];
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < K; j++) {
      x[i][j] = rand() % 100;
    }
  }
  for (int i = 0; i < K; i++) {
    for (int j = 0; j < N; j++) {
      y[i][j] = rand() % 100;
    }
  }
  for (int i = 0; i < NbThreads; i++) {
    thread_ids[i] = i;
    pthread_create(&threads[i], NULL, matrix_multiply, &thread_ids[i]);
  }
  for (int i = 0; i < NbThreads; i++) {
    pthread_join(threads[i], NULL);
  }

  
  printf("z[0][0] = %d\n", z[0][0]);

  return 0;
}
